package com.test;

import java.io.IOException;

import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.project.HomePage;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;
import com.testbase.TestBase;
import com.utilities.Utilities;
import com.utilities.Wrapper;

public class Validations extends TestBase{
	HomePage homePage;
	Wrapper wrapobject;
	Utilities objUtilities;
	public ExtentReports extent;
	public ExtentTest extentTest;
	
	public Validations() {
	super();
	}
	@BeforeTest
	public void setExtent() {
	extent = new ExtentReports(System.getProperty("user.dir") + "/test-output/ExtentReportValidations.html", true);
	extent.addSystemInfo("Host Name", "Sumi K");
	extent.addSystemInfo("User Name", "Sumi K");
	extent.addSystemInfo("Environment", "Project");
	}
	@BeforeClass
	public void setUp() {
	initialization();
	homePage = new HomePage();
	wrapobject = new Wrapper();
	objUtilities = new Utilities();
	}
	
	/*@DataProvider (name = "dataprovider1")
	public Object[][] dpMethod2() {
	  Object newTestData[][] = Utilities.getTestData("Sheet1");
	  return newTestData;
	  }

	@Test(priority=1,dataProvider="dataprovider1",groups= {"SignUpValidations"})
	public void duplicateSignup(String Username,String Password) throws InterruptedException {
	   extentTest = extent.startTest("SignupDuplicatecheck");
	   homePage.checkSignup(Username,Password);
	   //Assert.assertTrue(false);
	   }
	
	@Test(priority=2,groups= {"SignUpValidations"})
	@Parameters({"name","password"})
	public void signupUserNameOnly(String Username,String Password) throws InterruptedException {
	  extentTest = extent.startTest("SignupUserOnlycheck");
	  homePage.checkSignup(Username, Password);
	  //Assert.assertTrue(false);
	  }
	                   
    @DataProvider(name="dataprovider")
    public Object[][] dpMethod(){
      return new Object [][] {{"","retest"}};
      }
    @Test(priority=3,dataProvider="dataprovider",groups= {"SignUpValidations"})
    public void signupPasswordOnly(String Username,String Password) throws InterruptedException {
      extentTest = extent.startTest("SignupPasswordOnlycheck");
  	  homePage.checkSignup(Username, Password);
  	  //Assert.assertTrue(false);
      }    
    @DataProvider(name="dataprovider2")
    public Object[][] dpMethod1(){
      return new Object [][] {{"Tetser","testing"}};
      }
    @Test(priority=4,dataProvider="dataprovider2",groups= {"SignUpValidations"})
      public void sInPasswordLen(String Username,String Password) {
      extentTest = extent.startTest("Password<6and>13characterscheck");
      homePage.passwordLengthcheck(Username, Password);
      wrapobject.passwordLengthCheck(Password);
      }
    
    @Test(priority=5,dataProvider="dataprovider2",groups= {"SignUpValidations"})
    
    public void sInPasswordLength(String Username,String Password) {
      extentTest = extent.startTest("Password>6and<13characterscheck");
      
      homePage.passwordLengthcheck(Username, Password);
      wrapobject.passwordLengthCheck1(Password);
      }
    @Test(priority=6,dependsOnMethods = {"sInPasswordLen"})
    
    public void passwordCheck () {
    	System.out.println("Password Length is between 6 and 13 characters");
    }
   @Test(priority=7,dependsOnMethods = {"sInPasswordLength"})
    
    public void passwordChecks () {
      System.out.println("Password Length is lessthan 6 or greaterthan 13 characters");
      }*/
     
   @DataProvider(name="dataprovider3")
   public Object[][] dpMethod3(){
      return new Object [][] {{"Tetser","tester"},{"aami","aami123"},{"aami","aami"},{"aami123","aami123"}};
     }
	@Test(priority=8,dataProvider="dataprovider3",groups= {"LoginValidations"})
	public void loginValidation(String Username,String Password) throws InterruptedException {
	  extentTest = extent.startTest("InvalidloginValidations");
	  homePage.logInValidations(Username, Password);
	  Assert.assertTrue(true);
	 }
	@Test(priority=9,dataProvider="dataprovider3",groups= {"LoginValidations"})
	public void loginPasswordLength(String Username,String Password) throws InterruptedException {
	  extentTest = extent.startTest("InvalidloginValidations");
	  wrapobject.passwordLengthCheck(Password);
	  }
	
	@AfterMethod
	public void tearDown(ITestResult result) throws IOException {
	if (result.getStatus() == ITestResult.FAILURE) {
	extentTest.log(LogStatus.FAIL, "TEST CASE FAILED IS " + result.getName());
	extentTest.log(LogStatus.FAIL, "TEST CASE FAILED IS " + result.getThrowable());
	String screenshotPath = objUtilities.getScreenshot(driver, result.getName());
	extentTest.log(LogStatus.FAIL, extentTest.addScreenCapture(screenshotPath));
	} else if (result.getStatus() == ITestResult.SKIP) {
	extentTest.log(LogStatus.SKIP, "Test Case SKIPPED IS " + result.getName());
	} else if (result.getStatus() == ITestResult.SUCCESS) {
	extentTest.log(LogStatus.PASS, "Test Case PASSED IS " + result.getName());
	String screenshotPath = objUtilities.getScreenshot(driver, result.getName());
	extentTest.log(LogStatus.PASS, extentTest.addScreenCapture(screenshotPath));
	}
	extent.endTest(extentTest);
	}
	@AfterTest
	public void endReport() {
	extent.flush();
	extent.close();
	driver.quit();
	}
	}






